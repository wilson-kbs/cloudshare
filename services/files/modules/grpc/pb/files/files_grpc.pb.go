// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package files

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesStoreClient is the client API for FilesStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesStoreClient interface {
	IsExist(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	Delete(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*empty.Empty, error)
	GenerateFileFromCache(ctx context.Context, in *GenerateFile, opts ...grpc.CallOption) (*empty.Empty, error)
}

type filesStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesStoreClient(cc grpc.ClientConnInterface) FilesStoreClient {
	return &filesStoreClient{cc}
}

func (c *filesStoreClient) IsExist(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/files.FilesStore/IsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesStoreClient) Delete(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/files.FilesStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesStoreClient) GenerateFileFromCache(ctx context.Context, in *GenerateFile, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/files.FilesStore/GenerateFileFromCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesStoreServer is the server API for FilesStore service.
// All implementations must embed UnimplementedFilesStoreServer
// for forward compatibility
type FilesStoreServer interface {
	IsExist(context.Context, *ItemID) (*wrappers.BoolValue, error)
	Delete(context.Context, *ItemID) (*empty.Empty, error)
	GenerateFileFromCache(context.Context, *GenerateFile) (*empty.Empty, error)
	mustEmbedUnimplementedFilesStoreServer()
}

// UnimplementedFilesStoreServer must be embedded to have forward compatible implementations.
type UnimplementedFilesStoreServer struct {
}

func (UnimplementedFilesStoreServer) IsExist(context.Context, *ItemID) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExist not implemented")
}
func (UnimplementedFilesStoreServer) Delete(context.Context, *ItemID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFilesStoreServer) GenerateFileFromCache(context.Context, *GenerateFile) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFileFromCache not implemented")
}
func (UnimplementedFilesStoreServer) mustEmbedUnimplementedFilesStoreServer() {}

// UnsafeFilesStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesStoreServer will
// result in compilation errors.
type UnsafeFilesStoreServer interface {
	mustEmbedUnimplementedFilesStoreServer()
}

func RegisterFilesStoreServer(s grpc.ServiceRegistrar, srv FilesStoreServer) {
	s.RegisterService(&FilesStore_ServiceDesc, srv)
}

func _FilesStore_IsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesStoreServer).IsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesStore/IsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesStoreServer).IsExist(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesStoreServer).Delete(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesStore_GenerateFileFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesStoreServer).GenerateFileFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesStore/GenerateFileFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesStoreServer).GenerateFileFromCache(ctx, req.(*GenerateFile))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesStore_ServiceDesc is the grpc.ServiceDesc for FilesStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.FilesStore",
	HandlerType: (*FilesStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsExist",
			Handler:    _FilesStore_IsExist_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FilesStore_Delete_Handler,
		},
		{
			MethodName: "GenerateFileFromCache",
			Handler:    _FilesStore_GenerateFileFromCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/files.proto",
}

// CacheStoreClient is the client API for CacheStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheStoreClient interface {
	IsExist(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	Delete(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMetadata(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*MetaFile, error)
}

type cacheStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheStoreClient(cc grpc.ClientConnInterface) CacheStoreClient {
	return &cacheStoreClient{cc}
}

func (c *cacheStoreClient) IsExist(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/files.CacheStore/IsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheStoreClient) Delete(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/files.CacheStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheStoreClient) GetMetadata(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*MetaFile, error) {
	out := new(MetaFile)
	err := c.cc.Invoke(ctx, "/files.CacheStore/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheStoreServer is the server API for CacheStore service.
// All implementations must embed UnimplementedCacheStoreServer
// for forward compatibility
type CacheStoreServer interface {
	IsExist(context.Context, *ItemID) (*wrappers.BoolValue, error)
	Delete(context.Context, *ItemID) (*empty.Empty, error)
	GetMetadata(context.Context, *ItemID) (*MetaFile, error)
	mustEmbedUnimplementedCacheStoreServer()
}

// UnimplementedCacheStoreServer must be embedded to have forward compatible implementations.
type UnimplementedCacheStoreServer struct {
}

func (UnimplementedCacheStoreServer) IsExist(context.Context, *ItemID) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExist not implemented")
}
func (UnimplementedCacheStoreServer) Delete(context.Context, *ItemID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCacheStoreServer) GetMetadata(context.Context, *ItemID) (*MetaFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedCacheStoreServer) mustEmbedUnimplementedCacheStoreServer() {}

// UnsafeCacheStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheStoreServer will
// result in compilation errors.
type UnsafeCacheStoreServer interface {
	mustEmbedUnimplementedCacheStoreServer()
}

func RegisterCacheStoreServer(s grpc.ServiceRegistrar, srv CacheStoreServer) {
	s.RegisterService(&CacheStore_ServiceDesc, srv)
}

func _CacheStore_IsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheStoreServer).IsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.CacheStore/IsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheStoreServer).IsExist(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.CacheStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheStoreServer).Delete(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheStore_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheStoreServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.CacheStore/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheStoreServer).GetMetadata(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheStore_ServiceDesc is the grpc.ServiceDesc for CacheStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.CacheStore",
	HandlerType: (*CacheStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsExist",
			Handler:    _CacheStore_IsExist_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CacheStore_Delete_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _CacheStore_GetMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/files.proto",
}
